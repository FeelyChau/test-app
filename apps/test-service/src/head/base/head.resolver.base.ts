/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateHeadArgs } from "./CreateHeadArgs";
import { UpdateHeadArgs } from "./UpdateHeadArgs";
import { DeleteHeadArgs } from "./DeleteHeadArgs";
import { HeadCountArgs } from "./HeadCountArgs";
import { HeadFindManyArgs } from "./HeadFindManyArgs";
import { HeadFindUniqueArgs } from "./HeadFindUniqueArgs";
import { Head } from "./Head";
import { User } from "../../user/base/User";
import { HeadService } from "../head.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Head)
export class HeadResolverBase {
  constructor(
    protected readonly service: HeadService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Head",
    action: "read",
    possession: "any",
  })
  async _headsMeta(
    @graphql.Args() args: HeadCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Head])
  @nestAccessControl.UseRoles({
    resource: "Head",
    action: "read",
    possession: "any",
  })
  async heads(@graphql.Args() args: HeadFindManyArgs): Promise<Head[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Head, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Head",
    action: "read",
    possession: "own",
  })
  async head(@graphql.Args() args: HeadFindUniqueArgs): Promise<Head | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Head)
  @nestAccessControl.UseRoles({
    resource: "Head",
    action: "create",
    possession: "any",
  })
  async createHead(@graphql.Args() args: CreateHeadArgs): Promise<Head> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        users: args.data.users
          ? {
              connect: args.data.users,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Head)
  @nestAccessControl.UseRoles({
    resource: "Head",
    action: "update",
    possession: "any",
  })
  async updateHead(@graphql.Args() args: UpdateHeadArgs): Promise<Head | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          users: args.data.users
            ? {
                connect: args.data.users,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Head)
  @nestAccessControl.UseRoles({
    resource: "Head",
    action: "delete",
    possession: "any",
  })
  async deleteHead(@graphql.Args() args: DeleteHeadArgs): Promise<Head | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "users",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async resolveFieldUsers(
    @graphql.Parent() parent: Head
  ): Promise<User | null> {
    const result = await this.service.getUsers(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
